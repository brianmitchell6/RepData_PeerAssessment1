log(5064)
exp(8.53)
exp(9)
bag.weight <- c(29.4,29.0,28.4,28.8,28.9,29.3,28.5,28.2 )
mean(bag.weight)
sd(bag.weight)
t.test(bag.weight, mu=28.5)
?t.test
(93.6-91)/(7.8/sqr(25))
?sqr
(93.6-91)/(7.8/sqrt(25))
42.6-5.3*1.796
5.3/sqrt(12)
(5.3/sqrt(12)*1.796)
42.6-(5.3/sqrt(12)*1.796)
42.6+(5.3/sqrt(12)*1.796)
qt(.025, 9)
gum <- c(79, 95, 85, 82)
nogum <- c(80, 94, 87, 84).
t.test(gum, nogum, paired=TRUE)
gum <- c(79, 95, 85, 82)
nogum <- c(80, 94, 87, 84)
t.test(gum, nogum, paired=TRUE)
gum.dif <- gum-nogum
sd(gum.dif)
library(SDSFoundations)
post <- PostSurvey
rm(gum)
rm(gum.dif)
rm(n9gum)
rm(nogum)
View(post)
table(post$classification)
under.happy <- post$happy[post$classification=="Freshman" | post$classification=="Sophomore"]
upper.happy <- post$happy[post$classification=="Junior" | post$classification=="Senior"]
hist(under.happy)
hist(upper.happy)
t.test(under.happy, upper.happy)
mean(under.happy)
mean(upper.happy)
happy <- post$happy
posthappy <- post$post_happy
diff.happy <- happy - posthappy
hist(diff.happy)
t.test(diff.happy)
hs.hw <- post$hw_hours_HS
cl.hw <- post$hw_hours_college
diff.hw <= hs.hw - cl.hw
diff.hw <- hs.hw - cl.hw
mean(diff.hw)
t.test(diff.hw)
greek.sleep <- post$sleep_Sat[post$greek=="yes"]
non.greek.sleep <- post$sleep_Sat[post$greek=="no"]
mean(non.greek.sleep) - mean(greek.sleep)
t.test(non.greek.sleep, greek.sleep)
hist(diff.hw)
library(SDSFoundations)
under.happy <- post$happy[post$classification=="Freshman" | post$classification=="Sophomore"]
post <- PostSurvey
post$diff.study <- post$hw_hours_college - post$hw_hours_HS
View(post)
nurse.diff <- post$diff.study[post$major=="Nursing"]
bio.diff <- post$diff.study[post$major=="Biology"]
hist(nurse.diff)
hist(bio.diff)
t.test(nurse.diff, bio.diff)
?qt
qt(.05, 25)
sqrt( (25/26) + (36/32) )
6/1.44
qt(.025, 15)
qt(.05, 15)
monkey <- data.frame(id=c(1:16),
left=c(16.3, 4.8, 10.7, 14.0, 15.7, 9.9, 29.3, 20.4, 15.7, 7.6, 16.2, 14.7, 15.0, 8.4, 23.3, 17.7),
right=c(11.5, 3.5, 12.8, 7.9, 15.2, 9.8, 24.0, 14.9, 12.6, 8.2, 8.4, 11.0, 12.5, 9.2, 17.5, 11.1))
View(monkey)
monkey$diff <- monkey$left - monkey$right
View(monkey)
mean(monkey$diff)
sd(monkey$diff)
t.test(monkey$diff)
sd(monkey$diff)/4
38+28+24
90/3
?chisqure
?chi_square
?chi.square
?chisq.test
brand <- c(a=38, b=28, c=24)
brankd
brand
chisq.test(brand)
hist(runif(1000))
rexp(n, lambda)
lambda <- .2
n <- 1
rexp(n, lambda)
n <-2
rexp(n, lambda)
rexp(n, lambda)
hist(rexp(n, lambda))
n <- 5
hist(rexp(n, lambda))
n <- 40
hist(rexp(n, lambda))
n <- 1000
hist(rexp(n, lambda))
?lapply
testexp <- rexp(n, lambda)
sapply(testexp, hist)
sapply(testexp, mean)
?sapply
testexp.list <- replicate(1000, rexp(n, lambda))
View(testexp.list)
list.mean <- sapply(testexp.list, mean)
View(testexp.list)
head(list.mean)
?tapply
list.mean
n
source('C:/Users/Safe User/Desktop/Online Classes/Statistical Inference/Project/Part 1/exponential.R')
source('C:/Users/Safe User/Desktop/Online Classes/Statistical Inference/Project/Part 1/exponential.R')
hist(sample.mean)
source('C:/Users/Safe User/Desktop/Online Classes/Statistical Inference/Project/Part 1/exponential.R')
?rexp
source('C:/Users/Safe User/Desktop/Online Classes/Statistical Inference/Project/Part 1/exponential.R')
hist(raw.exp)
hist(sample.mean)
?qplot
qplot(raw.exp)
max(raw.exp)
min(raw.exp)
qplot(raw.exp, binwidth=1)
qplot(raw.exp, binwidth=2)
qplot(raw.exp, binwidth=3)
qplot(raw.exp, binwidth=1.5)
qplot(raw.exp, binwidth=2.5)
qplot(raw.exp)
qplot(raw.exp, binwidth=1.5)
qplot(sample.mean, binwidth=1.5)
qplot(sample.mean, binwidth=.5)
qplot(sample.mean)
qplot(sample.mean, binwidth=.4)
qplot(sample.mean, binwidth=.3)
qplot(sample.mean, binwidth=.2)
qplot(sample.mean, binwidth=.1)
qplot(sample.mean)
1/.2
?qplot
range(raw.exp)
range(raw.exp)/30
qplot(sample.mean, facets=2)
source('C:/Users/Safe User/Desktop/Online Classes/Statistical Inference/Project/Part 1/exponential.R')
source('C:/Users/Safe User/Desktop/Online Classes/Statistical Inference/Project/Part 1/exponential.R')
qplot(raw.exp,
main="Exponential Distribution (lambda=0.2)",
xlab="Exponential Values",
ylab="Cumulative Values")
source('C:/Users/Safe User/Desktop/Online Classes/Statistical Inference/Project/Part 1/exponential.R')
source('C:/Users/Safe User/Desktop/Online Classes/Statistical Inference/Project/Part 1/exponential.R')
source('C:/Users/Safe User/Desktop/Online Classes/Statistical Inference/Project/Part 1/exponential.R')
source('C:/Users/Safe User/Desktop/Online Classes/Statistical Inference/Project/Part 1/exponential.R')
source('C:/Users/Safe User/Desktop/Online Classes/Statistical Inference/Project/Part 1/exponential.R')
test.plot <- sample.plot + geom_line(x=5)
print(test.plot)
test.plot <- sample.plot + geom_line(x=5, color="red")
print(test.plot)
sample.plot <- qplot(sample.mean,
geom_line(x=5, color="red"),
main="Distribution Of Sample Means",
xlab="Cumulative Values",
ylab="Sample Means")
print(sample.plot)
sample.plot2 <- ggplot(sample.mean)
print(sample.plot2)
sample.plot2 <- ggplot(as.data.frame(sample.mean))
print(sample.plot2)
sample.plot2 <- ggplot(as.data.frame(sample.mean))
sample.plot2 <- sample.plot2 + geom_hist()
print(sample.plot2)
sample.plot2 <- ggplot(as.data.frame(sample.mean))
sample.plot2 <- sample.plot2 + geom_histogram()
print(sample.plot2)
data.frame(test) <- NULL
date.frame(test)
data.frame(test)
as.data.frame(test)
?data.frame
sample.mean <- data.frame(mean=NULL)
source('C:/Users/Safe User/Desktop/Online Classes/Statistical Inference/Project/Part 1/exponential.R')
dim(sample.mean)
dim(sample.mean) <- c(1000,1)
sample.mean <- data.frame(mean=1:1000)
source('C:/Users/Safe User/Desktop/Online Classes/Statistical Inference/Project/Part 1/exponential.R')
source('C:/Users/Safe User/Desktop/Online Classes/Statistical Inference/Project/Part 1/exponential.R')
setwd("C:/Users/Safe User/Desktop/Online Classes/Analytics Edge/Week 1")
CPS <- read.csv("CPSdata.csv")
View(CPS)
MetroAreaMap <- read.csv("MetroAreaCodes.csv")
CountryMap <- read.csv("CountryCode.csv")
CountryMap <- read.csv("CountryCodes.csv")
nrow(MetroAreaMap)
nrow(CountryMap)
View(CountryMap)
View(MetroAreaMap)
dir()
CPS <- merge(CPS, MetroAreaMap, by.x="MetroAreaCode", by.y="Code", all.x=TRUE)
View(CPS)
names(CPS)
table(CPS$MetroArea)
?count
nrow(CPS[is.na(CPS$MetroArea),])
View(MetroAreaMap)
View(CPS)
head(CPS)
View(CPS)
View(CPS)
max(table(CPS$MetroArea))
sort(table(CPS$MetroArea))
?tapply
View(CPS)
tapply(CPS, CPS$Hispanic, mean)
tapply(CPS$Hispanic, CPS$MetroArea, mean)
sort(tapply(CPS$Hispanic, CPS$MetroArea, mean))
sort(tapply(CPS$Asian==TRUE, CPS$MetroArea, mean))
sort(tapply(CPS$Race=="Asian", CPS$MetroArea, mean))
nrow(tapply(CPS$Race=="Asian", CPS$MetroArea, mean))
4/271
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm==TRUE))
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm=TRUE))
CPS <- merge(CPS, CountryMap, by.x="CountryOfBirthCode", by.y="Code", all.x=TRUE)
View(CPS)
View(CPS)
View(CPS)
names(CPS)
nrow(is.na(CPS$Country))
head(CPS)
nrow(is.na(CPS$Country))
table(is.na(CPS$Country))
sort(table(CPS$Country))
names(CPS)
CPS[CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA",]
head(CPS[CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA",])
View(CPS)
names(CPS)
head(CPS[CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA",])
nrow(CPS[CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA",])
cps.ny <- CPS[CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA",]
View(cps.ny)
head(cps.ny)
cps.ny <- cps.ny[!is.na(cps.ny$Country),]
head(cps.ny)
View(cps.ny)
nrow(cps.ny$Country=="United States")
nrow(cps.ny[cps.ny$Country=="United States",])
1 - 3736/5404
rm(cps.ny)
names(CPS)
cps.india <- CPS[CPS$Country=="India", ]
table(cps.india$MetroArea)
sort(table(cps.india$MetroArea))
cps.india <- CPS[CPS$Country=="India", ]
sort(table(cps.india$MetroArea))
cps.india <- CPS[CPS$Country=="India", ]
cps.brazil <- CPS[CPS$Country=="Brazil", ]
sort(table(cps.brazil$MetroArea))
cps.somalia <- CPS[CPS$Country=="Somalia", ]
sort(table(cps.somalia$MetroArea))
sd(c(5,8,12))
which.min(c(4,1,6))
setwd("C:/Users/Safe User/Desktop/Online Classes/Analytics Edge/Week 1")
dir()
dir()
who <- read.csv("WHO.csv")
names(who)
View(who)
mean(who$Over60)
?which.min
who[which.min(who$Over60), who$Country]
which.min(who$Over60)
who[183,]
which.max(who$LiteracyRate)
who[44,]
dir()
names(who)
sort(tapply(who$ChildMortality, who$Region, mean))
dir()
poll <- read.csv("AnonymityPoll.csv")
str(poll)
summary(poll)
View(poll)
View(poll)
View(poll)
table(poll$Smartphone)
?table
table(poll$Smartphone, useNA="yes")
table(poll$Smartphone, useNA="ifany")
names(poll)
table(poll$Region)
table(poll$Region, poll$State)
table(poll$State, poll$Region)
name(poll)
names(poll)
table(poll$Internet.Use, poll$Smartphone)
table(poll$Internet.Use, poll$Smartphone, useNA="ifany")
?subset
limited <- subset(poll, poll$Internet.Use==1 | poll$Smartphone ==1)
View(limited)
View(poll)
summary(limited)
names(limited)
mean(limited$Info.On.Internet)
table(limited$Info.On.Internet)
mean(limited$Worry.About.Info)
?mean
mean(limited$Worry.About.Info, na.rm=T)
mean(limited$Anonymity.Possible, na.rm=T)
mean(limited$Tried.Masking.Identity, na.rm=T)
mean(limited$Privacy.Laws.Effective, na.rm=T)
hist(limited)
hist(limited$Age)
plot(limited$Age, limited$Info.On.Internet)
table(limited$Age, limited$Info.On.Internet)
max(table(limited$Age, limited$Info.On.Internet))
jitter(c(1, 2, 3))
jitter(c(1, 2, 3))
plot(jitter(limited$Age), jitter(limited$Info.On.Internet))
names(limited)
tapply(limited$Info.On.Internet, limited$Smartphone, summary)
tapply(limited$Tried.Masking.Identity, limited$Smartphone, summary)
setwd("C:/Users/Safe User/Desktop/Online Classes/Reproducible Research/Projects/Project 1")
setwd("C:/Users/Safe User/Desktop/Online Classes/Reproducible Research/Projects/Project 1/RepData_PeerAssessment1")
dir()
activity <- read.table(fpath, header=TRUE, sep=";", row.names=NULL, na.strings="?")
#create temporary directory and placeholder file
td <- tempdir()
tf <- tempfile(tmpdir=td, fileext=".zip")
#download file to temporary file
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url, tf)
#get the name of the zip file and unzip
fname <- unzip(tf, list=TRUE)$Name[1]
unzip(tf, files=fname, exdir=td, overwrite=TRUE)
#get the full path to the extracted file
fpath = file.path(td, fname)
#read file into data frame
activity <- read.table(fpath, header=TRUE, sep=";", row.names=NULL, na.strings="?")
View(activity)
View(activity)
str(activity)
#create temporary directory and placeholder file
td <- tempdir()
tf <- tempfile(tmpdir=td, fileext=".zip")
#download file to temporary file
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url, tf)
#get the name of the zip file and unzip
fname <- unzip(tf, list=TRUE)$Name[1]
unzip(tf, files=fname, exdir=td, overwrite=TRUE)
#get the full path to the extracted file
fpath = file.path(td, fname)
#read file into data frame
activity <- read.table(fpath, header=TRUE, sep=",", row.names=NULL)
View(activity)
str(activity)
summary(activity)
View(activity)
head(activity)
type(date)
View(activity)
class(date)
class(activity$date)
as.date(activity$date, format = "%Y-%m%d")
as.Date(activity$date, format = "%Y-%m%d")
as.Date(activity$date, format = "%Y-%m-%d")
activity$date <- as.Date(activity$date, format = "%Y-%m-%d")
View(activity)
View(activity)
summary(activity)
dir()
?format
as.date(activity$date, format="%m")
as.Date(activity$date, format="%m")
library(lubridate)
head(month(activity$date))
?month
View(activity)
names(activity)
tapply(activity$steps, activity$date, sum)
summary(activity$date)
?sum
tapply(activity$steps, activity$date, sum, na.rm==T)
tapply(activity$steps, activity$date, sum, na.rm=T)
steps.day <- tapply(activity$steps, activity$date, sum, na.rm=T)
hist(steps.day)
rm(steps.day)
steps.per.day <- tapply(activity$steps, activity$date, sum, na.rm=T)
hist(steps.per.day)
mean(steps.per.day)
median(steps.per.day)
summary(steps.per.day)
?mean
round(mean(steps.per.day))
tapply(activity$steps, activity$interval, mean, rm.na==T)
tapply(activity$steps, activity$interval, mean, rm.na=T)
tapply(activity$steps, activity$interval, mean, na.rm=T)
interval.mean <- tapply(activity$steps, activity$interval, mean, na.rm=T)
plot(interval.mean)
plot(interval.mean, type="l")
plot(interval.mean, type="l", main="Average number of steps per interval")
plot(interval.mean, type="l", main="Average number of steps per interval", xlab="Interval")
plot(interval.mean, type="l", main="Average number of steps per interval", xlab="Interval", ylab="Average Steps")
plot(interval.mean, type="l", main="Average Number Of Steps Per Interval", xlab="Interval", ylab="Average Steps")
max(interval.mean)
plot(interval.mean, type="l")
?plot
class(interval.mean)
dim(interval.mean)
interval.mean[1]
interval.mean[1][1]
subset(interval.mean)
?subset
interval.mean
interval.mean[1]
interval.mean[1,1]
?array
test <- interval.mean
test <- dim(1,1)
?dim
dim(test) <- c(1,1)
ncol(tst)
ncol(test)
interval.mean$1
interval.mean$[1]
names(interval.mean)
?names
interval.mean[5]
?value
?[]
??[]
as.data.frame(interval.mean)
test <- as.data.frame(interval.mean)
head(test)
names(test) <- c("interval", "interval.mean")
test[,1]
test[,2]
head(test)
dim(test)
View(test)
View(test)
test$row.names
test$interval.mean
?split
names(test)
test2 <- sapply(activity$steps, activity$interval, mean, na.rm=T)
test2 <- sapply(activity$steps, activity$interval, FUN=mean, na.rm=T)
head(interval.mean)
interval.mean$V1
interval.mean[1]
interval.mean[1]$
interval.mean
?apply
rm(test)
?aggregate
aggregate(activity, by=activity$interval, FUN=mean)
aggregate(activity, by=as.list(activity$interval), FUN=mean)
?group by
?by
by(activity$steps, activity$interval, mean)
by(activity$steps, activity$interval, mean, na.rm=T)
test <- by(activity$steps, activity$interval, mean, na.rm=T)
class(test)
names(test)
test[1]
test[2]
rm(test)
test <- aggregate(activity$steps, activity$interval, mean, na.rm=T)
test <- aggregate(activity$steps, list(activity$interval), mean, na.rm=T)
class(test)
head(test)
test2 <- aggregate(steps ~ interval, activity, mean, na.rm=T)
class(test2)
head(test2)
interval.mean <- aggregate(steps ~ interval, activity, mean, na.rm=T)
rm(test, test2)
names(interval.mean)
plot(interval.mean$interval, interval$mean$steps, type="l")
plot(interval.mean$interval, interval.mean$steps, type="l")
max(interval.mean)
max(interval.mean$steps)
which.max(interval.mean$steps)
interval.mean$interval[104]
interval.mean$interval[which.max(interval.mean$steps)]
interval.mean <- aggregate(steps ~ interval, activity, mean, na.rm=T)
plot(interval.mean$interval, interval.mean$steps, type="l" +
main = "Mean Number Of Steps For Each Interval", +
xlab = "Interval" +
ylab = "Mean Number Of Steps")
plot(interval.mean$interval, interval.mean$steps, type="l" +
main = "Mean Number Of Steps For Each Interval", +
xlab = "Interval", +
ylab = "Mean Number Of Steps")
plot(interval.mean$interval, interval.mean$steps, type="l", +
main = "Mean Number Of Steps For Each Interval", +
xlab = "Interval", +
ylab = "Mean Number Of Steps")
```
plot(interval.mean$interval, interval.mean$steps, type="l",
main = "Mean Number Of Steps For Each Interval",
xlab = "Interval",
ylab = "Mean Number Of Steps")
interval.mean$interval[which.max(interval.mean$steps)]
